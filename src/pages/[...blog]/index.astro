---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import Hero from '~/components/widgets/Hero.astro';
import Content from '~/components/widgets/Content.astro';
import Features2 from '~/components/widgets/Features2.astro';
import CallToAction from '~/components/widgets/CallToAction.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';

import { createClient } from '@supabase/supabase-js';

import defaultImage from '~/assets/images/default.png';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: `${post.title} | SalesTag Blog`,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;

// Fetch view count from Supabase
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL!,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY!
);
const slug = post.slug;
const { count: viewCount } = await supabase
  .from('blog_views')
  .select('id', { count: 'exact', head: true })
  .eq('slug', slug);

// Get related posts for Features2 section
const { data: allPosts } = await supabase
  .from('blog_views')
  .select('slug')
  .neq('slug', slug)
  .limit(6);

const relatedPosts = allPosts?.slice(0, 3) || [];
---

<Layout metadata={metadata} publishDate={post.publishDate}>
  <!-- Hero Section for Blog Post -->
  <section class="py-8 sm:py-16 lg:py-20 mx-auto">
    <div class="max-w-4xl mx-auto px-6 sm:px-6">
      <!-- Blog Post Header -->
      <div class="text-center mb-8">
        <div class="flex justify-center items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
          <span>üìÖ {post.publishDate ? new Date(post.publishDate).toLocaleDateString() : ''}</span>
          {post.author && <span>üë§ {post.author}</span>}
          {post.readingTime && <span>‚è±Ô∏è {post.readingTime} min read</span>}
          <span>üëÅÔ∏è {viewCount ?? 0} views</span>
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter font-heading mb-6">
          {post.title}
        </h1>
        
        <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
          {post.excerpt}
        </p>

        {post.tags && post.tags.length > 0 && (
          <div class="flex flex-wrap justify-center gap-2 mb-8">
            {post.tags.map((tag) => (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                #{tag}
              </span>
            ))}
          </div>
        )}
      </div>

      <!-- Featured Image -->
      {image && (
        <div class="mb-8">
          <img
            src={typeof image === 'string' ? image : image.src}
            alt={post.excerpt || post.title}
            class="w-full max-w-4xl mx-auto rounded-lg shadow-lg"
            loading="eager"
          />
        </div>
      )}
    </div>
  </section>

  <!-- Blog Content -->
  <section class="py-8 mx-auto">
    <div class="max-w-4xl mx-auto px-6 sm:px-6">
      <article class="prose prose-lg lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg prose-headings:scroll-mt-[80px] prose-li:my-1 max-w-none">
        {post.Content ? <post.Content /> : <Fragment set:html={post.content || ''} />}
      </article>
    </div>
  </section>

  <!-- Author & Social Share Section -->
  <section class="py-8 bg-gray-50 dark:bg-gray-900">
    <div class="max-w-4xl mx-auto px-6 sm:px-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg p-8 shadow-sm">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
          <div class="mb-4 sm:mb-0">
            <h3 class="text-lg font-semibold mb-2">Share this article</h3>
            <p class="text-gray-600 dark:text-gray-300">Help others discover insights on AI sales intelligence</p>
          </div>
          <div class="flex space-x-3">
            <a 
              href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.title)}&url=${encodeURIComponent(url.toString())}`}
              target="_blank"
              class="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              Share on Twitter
            </a>
            <a 
              href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url.toString())}`}
              target="_blank"
              class="inline-flex items-center px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors"
            >
              Share on LinkedIn
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Related Articles -->
  {relatedPosts.length > 0 && (
    <Features2
      title="Continue Reading"
      subtitle="More insights on AI sales intelligence and coaching strategies"
      columns={3}
      items={[
        {
          title: 'The Rise of Sales Cyborg',
          description: 'How AI-augmented sales reps are transforming field sales performance and customer relationships.',
          icon: 'tabler:robot',
          callToAction: {
            text: 'Read Article',
            href: '/blog/rise-of-sales-cyborg',
          }
        },
        {
          title: 'Ethics of Recording Sales Calls',
          description: 'Best practices for transparent, ethical conversation capture that builds trust with prospects.',
          icon: 'tabler:shield-check',
          callToAction: {
            text: 'Read Article',
            href: '/blog/ethics-recording-sales-calls',
          }
        },
        {
          title: 'Sales Coaching in the LLM Era',
          description: 'How large language models are revolutionizing sales training and performance improvement.',
          icon: 'tabler:brain',
          callToAction: {
            text: 'Read Article',
            href: '/blog/sales-coaching-llm-era',
          }
        },
      ]}
    />
  )}

  <!-- Back to Blog -->
  <section class="py-8">
    <div class="max-w-4xl mx-auto px-6 sm:px-6 text-center">
      <a 
        href="/blog" 
        class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
      >
        ‚Üê Back to All Articles
      </a>
    </div>
  </section>

  <!-- Newsletter CTA -->
  <CallToAction
    title="Enjoyed This Article?"
    subtitle="Subscribe to get the latest insights on AI-powered sales intelligence and field sales strategies delivered to your inbox."
    actions={[
      {
        variant: 'primary',
        text: 'Subscribe to Newsletter',
        href: '/subscribe',
      },
      {
        variant: 'secondary',
        text: 'Explore SalesTag',
        href: '/',
      },
    ]}
  />
</Layout>

<script>
fetch('/api/track-view', {
  method: 'POST',
  body: JSON.stringify({
    slug: window.location.pathname.replace('/blog/', ''),
    referrer: document.referrer,
    userAgent: navigator.userAgent
  }),
  headers: { 'Content-Type': 'application/json' }
});
</script>
