---
import PageLayout from '~/layouts/PageLayout.astro';
import SeoMeta from '~/components/common/SeoMeta.astro';
import { createClient } from '@supabase/supabase-js';
import { fetchPosts } from '~/utils/blog';

function MetricCard({ label, value, positive }) {
  return (
    <div class="bg-white dark:bg-gray-900 rounded-lg shadow p-6 flex flex-col items-start border border-gray-100 dark:border-gray-800">
      <div class="flex items-center mb-2">
        {positive && <span class="text-green-500 mr-1">â†‘</span>}
        <span class="text-2xl font-bold">{value}</span>
      </div>
      <div class="text-gray-500 text-sm">{label}</div>
    </div>
  );
}

// Demo data for metrics page
const demo = {
  total_calls: 12345,
  tagged_calls: 11000,
  reviewed_calls: 9000,
  avg_call_length: 7.2,
  close_rate: 0.23,
  revenue_attributed: 154000,
};

const demoLeaderboard = [
  { rep_name: 'Alex Johnson', close_rate: 0.32, avg_call_length: 6.8, revenue_total: 54000 },
  { rep_name: 'Morgan Lee', close_rate: 0.28, avg_call_length: 7.1, revenue_total: 48000 },
  { rep_name: 'Taylor Smith', close_rate: 0.25, avg_call_length: 7.5, revenue_total: 42000 },
];

const metrics = demo;
const reps = demoLeaderboard;

// Fetch blog post view counts (optional - requires Supabase setup)
const posts = await fetchPosts();
let postsWithViews = posts.map((post) => ({ ...post, viewCount: 0 }));

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

if (supabaseUrl && supabaseKey) {
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    const slugs = posts.map((post) => post.slug);
    const { data: allViews } = await supabase
      .from('blog_views')
      .select('slug');
    const viewCounts = {};
    if (Array.isArray(allViews)) {
      for (const slug of slugs) {
        viewCounts[slug] = allViews.filter((v) => v.slug === slug).length;
      }
    }
    postsWithViews = posts.map((post) => ({ ...post, viewCount: viewCounts[post.slug] ?? 0 }));
  } catch (error) {
    console.warn('Supabase not configured for blog view tracking:', error);
  }
}

const sortedPosts = postsWithViews.sort((a, b) => b.viewCount - a.viewCount);
---

<SeoMeta 
  title="Sales Intelligence Dashboard â€“ SalesTag Metrics & Analytics"
  description="Track AI-tagged sales call metrics, conversion trends, and rep performance with SalesTag. Real-time analytics for field sales teams."
  url="https://salestag.io/metrics"
  image="/og/metrics.jpg"
  schemaType="WebPage"
/>

<PageLayout>
  <main class="px-4 py-16 mx-auto max-w-4xl">
    <h1 class="text-4xl font-bold mb-6">Sales Intelligence Dashboard</h1>
    
    <div class="mb-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
      <p class="text-blue-800 dark:text-blue-200 text-sm">
        ðŸ“Š Demo Dashboard - This page displays sample analytics data to showcase SalesTag's reporting capabilities.
      </p>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-2">
      <MetricCard label="Total Calls" value={metrics.total_calls?.toLocaleString()} positive={true} />
      <MetricCard label="Tagged Calls" value={metrics.tagged_calls?.toLocaleString()} positive={true} />
      <MetricCard label="Reviewed Calls" value={metrics.reviewed_calls?.toLocaleString()} positive={true} />
      <MetricCard label="Avg. Call Length (min)" value={metrics.avg_call_length?.toFixed(2)} positive={metrics.avg_call_length > 0} />
      <MetricCard label="Close Rate" value={(metrics.close_rate * 100).toFixed(2) + '%'} positive={metrics.close_rate > 0} />
      <MetricCard label="Revenue Attributed" value={'$' + metrics.revenue_attributed?.toLocaleString()} positive={metrics.revenue_attributed > 0} />
    </div>

    <section class="mt-16">
      <h2 class="text-2xl font-semibold mb-6">Top Performing Reps</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {reps.map(rep => (
          <div class="bg-white dark:bg-gray-900 shadow-md rounded-xl p-6 flex flex-col items-start border border-gray-100 dark:border-gray-800">
            <div class="text-2xl font-bold mb-2 text-gray-900 dark:text-gray-100">{rep.rep_name}</div>
            <div class="flex items-center mb-1">
              <span class="text-green-600 font-semibold text-lg mr-2">{(rep.close_rate * 100).toFixed(2)}%</span>
              <span class="text-gray-500 text-sm">Close Rate</span>
            </div>
            <div class="mb-1">
              <span class="font-medium">{rep.avg_call_length?.toFixed(2)}</span>
              <span class="text-gray-500 text-sm ml-1">min avg call</span>
            </div>
            <div>
              <span class="font-medium">${rep.revenue_total?.toLocaleString()}</span>
              <span class="text-gray-500 text-sm ml-1">revenue</span>
            </div>
          </div>
        ))}
      </div>
    </section>

    <section class="mt-16">
      <h2 class="text-2xl font-semibold mb-6">Blog Post View Counts</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full text-sm">
          <thead>
            <tr>
              <th class="text-left px-2 py-1">Title</th>
              <th class="text-left px-2 py-1">Slug</th>
              <th class="text-left px-2 py-1">Views</th>
            </tr>
          </thead>
          <tbody>
            {sortedPosts.map((post) => (
              <tr>
                <td class="px-2 py-1"><a href={post.permalink} class="hover:underline">{post.title}</a></td>
                <td class="px-2 py-1">{post.slug}</td>
                <td class="px-2 py-1">{post.viewCount}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </section>
  </main>
</PageLayout> 